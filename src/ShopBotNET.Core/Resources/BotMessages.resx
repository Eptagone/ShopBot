<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DemoInvoiceConfig" xml:space="preserve">
    <value>Select the options for your demo invoice. You'll need to supply all the requested data to "pay" for your "purchase".

&lt;b&gt;Real cards won't work with me&lt;/b&gt;, no money will be debited from your account. Use this test card number to pay for your Time Machine: &lt;code&gt;4242 4242 4242 4242&lt;/code&gt;</value>
  </data>
  <data name="DemoInvoiceResult" xml:space="preserve">
    <value>&lt;b&gt;Real cards won't work with me&lt;/b&gt;, no money will be debited from your account. Use this test card number to pay for your Time Machine: &lt;code&gt;4242 4242 4242 4242&lt;/code&gt;

This is your demo invoice:</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="Help" xml:space="preserve">
    <value>Hello, I'm the demo merchant bot. I can sell you various mythical goods and services. 

Use the /invoice command to create an invoice for a Time Machine. You can also use me to send invoices to any chat – simply start a message with '@{0} ' (the space is important). For an example see the @TestStore.

You can also send /terms for Terms and Conditions, and /support to leave feedback.</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Phone" xml:space="preserve">
    <value>Phone</value>
  </data>
  <data name="Photo" xml:space="preserve">
    <value>Photo</value>
  </data>
  <data name="SendInvoiceButton" xml:space="preserve">
    <value>🛍Send Invoice</value>
  </data>
  <data name="SendInvoiceError" xml:space="preserve">
    <value>Couldn't send invoice. Error from Bot API: 
&lt;pre&gt;{0}&lt;/pre&gt;</value>
  </data>
  <data name="Shipping" xml:space="preserve">
    <value>Shipping</value>
  </data>
  <data name="SuccessfulPayment" xml:space="preserve">
    <value>Thank you for your 'payment'! Don't worry, your imaginary credit card was not charged.

At this step, the user should receive a confirmation message with information about the delivery or any further steps for obtaining the services they paid for.</value>
  </data>
  <data name="Support" xml:space="preserve">
    <value>Please tell us about your problem with our bot.</value>
  </data>
  <data name="SupportInvalid" xml:space="preserve">
    <value>Sorry, we need a more substantial text message from you. Please describe your problem in a little more detail.</value>
  </data>
  <data name="SupportResult" xml:space="preserve">
    <value>Thanks for reaching out to us. We'll get back to you with response as soon as we can. Please note that it may take some time.</value>
  </data>
  <data name="Terms" xml:space="preserve">
    <value>Thank you for shopping with our demo bot. We hope you like your new time machine and other goods!

1. If your time machine was not delivered on time, please rethink your concept of time and try again.
2. If you find that your time machine is not working, kindly contact our future service workshops on Trappist-1e. They will be accessible anywhere between May 2075 and November 4000 C.E.
3. If you would like a refund, kindly apply for one yesterday and we will have sent it to you immediately.</value>
  </data>
  <data name="UnknownCommand" xml:space="preserve">
    <value>Unrecognized command. Say what?</value>
  </data>
  <data name="WebView" xml:space="preserve">
    <value>WebView</value>
  </data>
</root>